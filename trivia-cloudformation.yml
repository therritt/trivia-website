AWSTemplateFormatVersion: '2010-09-09'
Description: Trivia game backend websocket api with respective integrations

Resources:
  # VPC
  CacheVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 11.0.0.0/16
      Tags:
        - Key: Name
          Value: CacheVPC

  # Lambda (Public) Subnet
  LambdaSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CacheVPC
      CidrBlock: 11.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: LambdaSubnet

  # Cache (Private) Subnet
  CacheSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CacheVPC
      CidrBlock: 11.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: CacheSubnet

  # Internet Gateway
  CacheVpcInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CacheVpcInternetGateway

  # Internet Gateway Attachment
  CacheVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref CacheVPC
      InternetGatewayId: !Ref CacheVpcInternetGateway

  # Route Table for Lambda (Public) Subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CacheVPC

  # Route to Internet Gateway
  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CacheVpcInternetGateway

  # Lambda Subnet -> Route Table Association
  LambdaSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref LambdaSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Group for lambdas to interact w/ redis cluster
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function in public subnet
      VpcId: !Ref CacheVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  # Security Group for Redis Cache, allows access from lambdas
  RedisAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to ElastiCache from Lambda subnet
      VpcId: !Ref CacheVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  # ElastiCache Redis Cluster (one node)
  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t4g.micro
      Engine: redis
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RedisAccessSecurityGroup

  # Cache Subnet Group
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: RedisSubnetGroup
      SubnetIds:
        - !Ref CacheSubnet
      Description: Subnet group for ElastiCache Redis

  # Step functions
  RoomStepFunction:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      DefinitionString: !Sub |
        {
          "Comment": "Handles room creation and joining",
          "StartAt": "Check RoomID",
          "States": {
            "Check RoomID": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.roomId",
                  "IsPresent": true,
                  "Next": "Join Room"
                }
              ],
              "Default": "Create Room"
            },
            "Join Room": {
              "Type": "Task",
              "Resource": "${TriviaJoinRoom.Arn}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Send Web Socket Message"
            },
            "Create Room": {
              "Type": "Task",
              "Resource": "${TriviaCreateRoom.Arn}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Send Web Socket Message"
            },
            "Send Web Socket Message": {
              "Type": "Task",
              "Resource": "${TriviaSendMessage.Arn}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        }
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'

  # Lambda Functions
  TriviaConnect:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      FunctionName: 'TriviaConnect'
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          const { SFNClient, StartExecutionCommand } = require("@aws-sdk/client-sfn");

          exports.handler = async (event) => {
            const client = new SFNClient();

            const input = JSON.stringify({
              userId: event.requestContext.connectionId,
              username: event.queryStringParameters.username || 'Guest',
              roomId: event.queryStringParameters.roomId || undefined
            });

            const params = {
              stateMachineArn: process.env.SFN_ARN,
              input: input
            };

            const command = new StartExecutionCommand(params);
            await client.send(command);

            return {statusCode: 200}
          }
      Runtime: nodejs20.x
      Timeout: 5
      MemorySize: 128

  TriviaJoinRoom:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      FunctionName: 'TriviaJoinRoom'
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          const redis = require('/opt/node_modules/redis');

          // Create a Redis client
          const client = redis.createClient({
            host: process.env.REDIS_ENDPOINT,
            port: process.env.REDIS_PORT
          });

          // Lambda handler function
          exports.handler = async (event) => {
            const userId = event.userId;
            const roomCode = event.roomId;
            const userErrorMessage = {
              messageType: "UserError",
              userId: userId
            };
            const roomStatusMessage = {
              messageType: "RoomStatus",
              roomId: roomCode
            };

            try {
              await client.connect();

              const exists = await client.exists(`room:${roomCode}`);
              if (exists === 0) {
                // Room code already exists
                console.error('Room does not exist');
                return userErrorMessage;
              }

              const userData = { correctAnswers: 0, username: event.username};
              const roomKey = `room:${roomCode}`;

              await client.multi()
                .hSet(roomKey, userId, JSON.stringify(userData))
                .set(userId, roomCode)
                .expire(roomKey, 1800)
                .expire(userId, 1800)
                .exec();

              return {
                statusCode: 200,
                body: JSON.stringify(roomStatusMessage)
              };

            } catch (error) {
              console.error('Error generating room code:', error);
              return {
                statusCode: 500,
                body: userErrorMessage
              };
            } finally {
              await client.quit();
            }
          };
      Runtime: nodejs20.x
      Timeout: 10
      MemorySize: 128
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:redisLayer:1
      Environment:
        Variables:
          REDIS_ENDPOINT: !Sub "${RedisCluster.RedisEndpoint.Address}"
          REDIS_PORT: !Sub "${RedisCluster.RedisEndpoint.Port}"
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup

  TriviaCreateRoom:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      FunctionName: 'TriviaCreateRoom'
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          const redis = require('/opt/node_modules/redis');
          const crypto = require('crypto');

          // Create a Redis client
          const client = redis.createClient({
            host: process.env.REDIS_ENDPOINT,
            port: process.env.REDIS_PORT
          });

          // Lambda handler function
          exports.handler = async (event) => {
            const userId = event.userId;
            const userErrorMessage = {
              messageType: "UserError",
              userId: userId
            };
            
            try {
              await client.connect();

              const roomCode = crypto.randomBytes(4).toString('hex').toUpperCase();
              const exists = await client.exists(`room:${roomCode}`);
              if (exists === 1) {
                // Room code already exists
                console.error('Room code already exists');
                return userErrorMessage;
              }

              const userData = { correctAnswers: 0, username: event.username};
              const roomKey = `room:${roomCode}`;

              const roomStatusMessage = {
                messageType: "RoomStatus",
                roomId: roomCode
              };

              await client.multi()
                .hSet(roomKey, userId, JSON.stringify(userData))
                .set(userId, roomCode)
                .expire(roomKey, 1800)
                .expire(userId, 1800)
                .exec();

              return {
                statusCode: 200,
                body: JSON.stringify(roomStatusMessage)
              };

            } catch (error) {
              console.error('Error generating room code:', error);
              return {
                statusCode: 500,
                body: userErrorMessage
              };
            } finally {
              await client.quit();
            }
          };
      Runtime: nodejs20.x
      Timeout: 10
      MemorySize: 128
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:redisLayer:1
      Environment:
        Variables:
          REDIS_ENDPOINT: !Sub "${RedisCluster.RedisEndpoint.Address}"
          REDIS_PORT: !Sub "${RedisCluster.RedisEndpoint.Port}"
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup

  TriviaDisconnect:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      FunctionName: 'TriviaDisconnect'
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          const redis = require('/opt/node_modules/redis');

          // Create a Redis client
          const client = redis.createClient({
            host: process.env.REDIS_ENDPOINT,
            port: process.env.REDIS_PORT
          });

          // Lambda handler function
          exports.handler = async (event) => {
            const userId = event.requestContext.connectionId;

            try {
              await client.connect();
              const roomId = await client.get(userId);

              if (!roomId) {
                console.log(`User ${userId} is not in any room`);
                return {
                  statusCode: 200,
                  body: JSON.stringify({ message: `User ${userId} is not in any room` })
                };
              }

              await client.multi()
                .hDel(`room:${roomId}`, userId)
                .del(userId)
                .exec();

              console.log(`User ${userId} removed from room ${roomId}`);
              return {
                statusCode: 200,
                body: JSON.stringify({ message: `User ${userId} removed from room ${roomId}` })
              };

            } catch (err) {
              console.error('Error:', err);
              return {
                statusCode: 500,
                body: JSON.stringify({ message: 'Failed to remove user from room' })
              };
            } finally {
              await client.quit();
            }
          };
      Runtime: nodejs20.x
      Timeout: 10
      MemorySize: 128
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:redisLayer:1
      Environment:
        Variables:
          REDIS_ENDPOINT: !Sub "${RedisCluster.RedisEndpoint.Address}"
          REDIS_PORT: !Sub "${RedisCluster.RedisEndpoint.Port}"
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup

  TriviaSendMessage:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      FunctionName: 'TriviaSendMessage'
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          const { ApiGatewayManagementApiClient, PostToConnectionCommand} = require("@aws-sdk/client-apigatewaymanagementapi");
          const redis = require('/opt/node_modules/redis');

          const redisClient = redis.createClient({
            host: process.env.REDIS_ENDPOINT,
            port: process.env.REDIS_PORT
          });

          const apiClient = new ApiGatewayManagementApiClient({ endpoint: process.env.CONNECTION_URL });
                  
          exports.handler = async (event) => {
              const messageType = event.messageType;
              switch (messageType) {
                  case "RoomStatus":
                      const roomId = event.roomId;

                      if (roomId) {
                          await redisClient.connect();
                          const roomData = JSON.parse(await redisClient.hGetAll(`room:${roomId}`));
                          const userArray = [];
                          const connectionArray = [];

                          for (const user in roomData) {
                              connectionArray.push(user);
                              userArray.push(roomData);
                          }

                          const promises = connectionArray.map(connection => {
                              const message = new PostToConnectionCommand({
                                  ConnectionId: connection,
                                  Data: JSON.stringify({
                                      messageType: messageType,
                                      message: roomData
                                  })
                              });
                              return apiClient.send(message); // Return the promise
                          });
                  
                          // Use Promise.all to send all messages concurrently
                          await Promise.all(promises);
                      }
                      break;
                  
                  case "UserError":
                      const userId = event.userId;

                      if (userId) {
                          await apiClient.send(new PostToConnectionCommand({ ConnectionId: userId, Data: JSON.stringify({
                                  messageType: messageType,
                              })
                          }));
                      }
                      break;
                  default:
                      break;
              }

              console.dir(event);
              return { statusCode: 200 };
          };
      Runtime: nodejs20.x
      Timeout: 10
      MemorySize: 128
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:redisLayer:1
      Environment:
        Variables:
          CONNECTION_URL: !Sub 'https://${TriviaWebsocketApi}.execute-api.${AWS::Region}.amazonaws.com/production'
          REDIS_ENDPOINT: !Sub "${RedisCluster.RedisEndpoint.Address}"
          REDIS_PORT: !Sub "${RedisCluster.RedisEndpoint.Port}"

  TriviaStartGame:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      FunctionName: 'TriviaStartGame'
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          const { ApiGatewayManagementApiClient, PostToConnectionCommand} = require("@aws-sdk/client-apigatewaymanagementapi");
          const client = new ApiGatewayManagementApiClient({ endpoint: process.env.CONNECTION_URL });
            
          exports.handler = async (event) => {
            const connectionId = event.requestContext.connectionId;
            const message = new PostToConnectionCommand({ ConnectionId: connectionId, Data: "Game started" });
            await client.send(message);

            const response = { statusCode: 200 };
            return response;
          };
      Runtime: nodejs20.x
      Timeout: 3
      MemorySize: 128
      Environment:
        Variables:
          CONNECTION_URL: !Sub 'https://${TriviaWebsocketApi}.execute-api.${AWS::Region}.amazonaws.com/production'

  TriviaSubmitAnswer:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      FunctionName: 'TriviaSubmitAnswer'
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const response = {
              statusCode: 200,
              body: JSON.stringify('Hello from Lambda!'),
            };
            return response;
          };
      Runtime: nodejs20.x
      Timeout: 3
      MemorySize: 128

  # Lambda Invocation Permissions
  ConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TriviaWebsocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TriviaConnect
      Principal: apigateway.amazonaws.com

  DisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TriviaWebsocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TriviaDisconnect
      Principal: apigateway.amazonaws.com

  StartGamePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TriviaWebsocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TriviaStartGame
      Principal: apigateway.amazonaws.com

  SubmitAnswerPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TriviaWebsocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TriviaSubmitAnswer
      Principal: apigateway.amazonaws.com

  # Trivia WebSocket API
  TriviaWebsocketApi:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: TriviaWebsocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: '$request.body.action'

  # Deployment
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - StartGameRoute
      - SubmitAnswerRoute
    Properties:
      ApiId: !Ref TriviaWebsocketApi

  # Stages
  ApiStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref TriviaWebsocketApi
      StageName: production
      DeploymentId: !Ref Deployment

  # WebSocket Routes
  ConnectRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref TriviaWebsocketApi
      RouteKey: '$connect'
      AuthorizationType: NONE
      Target: !Join
        - '/'
        -
          - 'integrations'
          - !Ref ConnectIntegration

  DisconnectRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref TriviaWebsocketApi
      RouteKey: '$disconnect'
      AuthorizationType: NONE
      Target: !Join
        - '/'
        -
          - 'integrations'
          - !Ref DisconnectIntegration

  StartGameRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref TriviaWebsocketApi
      RouteKey: 'startGame'
      AuthorizationType: NONE
      Target: !Join
        - '/'
        -
          - 'integrations'
          - !Ref StartGameIntegration

  SubmitAnswerRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref TriviaWebsocketApi
      RouteKey: 'submitAnswer'
      AuthorizationType: NONE
      Target: !Join
        - '/'
        - 
          - 'integrations'
          - !Ref SubmitAnswerIntegration

  # Integrations
  ConnectIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref TriviaWebsocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TriviaConnect.Arn}/invocations'

  DisconnectIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref TriviaWebsocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TriviaDisconnect.Arn}/invocations'

  StartGameIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref TriviaWebsocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TriviaStartGame.Arn}/invocations'

  SubmitAnswerIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref TriviaWebsocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TriviaSubmitAnswer.Arn}/invocations'
